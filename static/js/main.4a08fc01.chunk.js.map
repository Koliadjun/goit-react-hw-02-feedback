{"version":3,"sources":["components/StatisticsComp/Statistics/Statistics.jsx","components/StatisticsComp/StatisticsCopm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Statistics","options","total","positivePercentage","ops","Object","keys","map","item","shortid","generate","StatisticsComp","state","props","stats","clickHandler","e","setState","prevState","target","textContent","countTotalFeedback","values","reduce","acc","curValue","countPositiveFeedbackPercentage","Math","round","good","totalFeedback","this","totalFeedbackPrs","onClick","Component","defaultProps","neutral","bad","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAiCeA,MA7Bf,YAA6D,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC9BC,EAAMC,OAAOC,KAAKL,GACxB,OACE,+BACGG,EAAIG,KAAI,SAAAC,GAAI,OACX,+BACGA,EADH,IACS,qCAAQP,EAAQO,QADhBC,IAAQC,eAIlBR,EACC,yCACS,+BAAOA,OAEd,KACHC,EACC,qDACqB,iCAAOA,EAAP,UAEnB,SChBGQ,EAAb,4MAeEC,MAfF,eAgBO,EAAKC,MAAMC,OAhBlB,EAkBEC,aAAe,SAAAC,GAAC,OACd,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOC,YAAcF,EAAUF,EAAEG,OAAOC,aAAe,OApBhE,EAsBEC,mBAAqB,WAEnB,OADchB,OAAOiB,OAAO,EAAKV,OACpBW,QAAO,eAACC,EAAD,uDAAO,EAAGC,EAAV,8CAAwBD,EAAOC,MAxBvD,EA0BEC,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKhB,MAAMiB,KAAO,EAAKR,qBAAwB,MA3BtE,4CA8BE,WAAU,IAAD,OACDS,EAAgBC,KAAKV,qBACrBW,EAAmBD,KAAKL,kCACxBzB,EAAUI,OAAOC,KAAKyB,KAAKnB,OACjC,OACE,gCACE,uDACA,6BACGX,EAAQM,KAAI,SAAAC,GAAI,OACf,6BACE,wBAAQyB,QAAS,EAAKlB,aAAtB,SAAqCP,KAD9BC,IAAQC,iBAKrB,2CACA,cAAC,EAAD,CACET,QAAS8B,KAAKnB,MACdV,MAAO4B,EACP3B,mBAAoB6B,WAhD9B,GAAoCE,aAAvBvB,EACJwB,aAAe,CACpBrB,MAAO,CACLe,KAAM,EACNO,QAAS,EACTC,IAAK,IAkDI1B,QCpDA2B,EANH,WACV,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4a08fc01.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nfunction Statistics({ options, total, positivePercentage }) {\n  const ops = Object.keys(options);\n  return (\n    <ul>\n      {ops.map(item => (\n        <li key={shortid.generate()}>\n          {item}:<span> {options[item]}</span>\n        </li>\n      ))}\n      {total ? (\n        <li>\n          total: <span>{total}</span>\n        </li>\n      ) : null}\n      {positivePercentage ? (\n        <li>\n          positive feedback: <span>{positivePercentage}%</span>\n        </li>\n      ) : null}\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  options: PropTypes.shape({}).isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import shortid from 'shortid';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Statistics from './Statistics/Statistics';\n\nexport class StatisticsComp extends Component {\n  static defaultProps = {\n    stats: {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    },\n  };\n  static propTypes = {\n    stats: PropTypes.shape({\n      good: PropTypes.number.isRequired,\n      neutral: PropTypes.number.isRequired,\n      bad: PropTypes.number.isRequired,\n    }),\n  };\n  state = {\n    ...this.props.stats,\n  };\n  clickHandler = e =>\n    this.setState(prevState => ({\n      [e.target.textContent]: prevState[e.target.textContent] + 1,\n    }));\n  countTotalFeedback = () => {\n    const value = Object.values(this.state);\n    return value.reduce((acc = 0, curValue) => (acc += curValue));\n  };\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const totalFeedback = this.countTotalFeedback();\n    const totalFeedbackPrs = this.countPositiveFeedbackPercentage();\n    const options = Object.keys(this.state);\n    return (\n      <div>\n        <h2>Please live a comment</h2>\n        <ul>\n          {options.map(item => (\n            <li key={shortid.generate()}>\n              <button onClick={this.clickHandler}>{item}</button>\n            </li>\n          ))}\n        </ul>\n        <h2>Statistic</h2>\n        <Statistics\n          options={this.state}\n          total={totalFeedback}\n          positivePercentage={totalFeedbackPrs}\n        />\n      </div>\n    );\n  }\n}\n\nexport default StatisticsComp;\n","import './App.css';\nimport React from 'react'\nimport StatisticsComp from './components/StatisticsComp';\nconst App = () => {\n  return (\n    <StatisticsComp />\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}