{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","good","neutral","bad","clickHandler","e","setState","prevState","target","textContent","countTotalFeedback","Object","values","reduce","acc","curValue","countPositiveFeedbackPercentage","Math","round","options","keys","this","totalFeedback","totalFeedbackPrs","map","item","onClick","shortid","generate","Component","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAIaA,EAAb,4MAKEC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,GART,EAUEC,aAAe,SAACC,GAAD,OAEb,EAAKC,UAAS,SAACC,GAAD,sBACTF,EAAEG,OAAOC,YAAcF,EAAUF,EAAEG,OAAOC,aAAe,OAblE,EAgBEC,mBAAqB,WAEnB,OADcC,OAAOC,OAAO,EAAKZ,OACpBa,QAAO,eAACC,EAAD,uDAAO,EAAGC,EAAV,8CAClBD,EAAOC,MAnBb,EAsBEC,gCAAkC,WAChC,OAAOC,KAAKC,MAAM,EAAKlB,MAAMC,KAAO,EAAKS,qBAAuB,MAvBpE,4CA0BE,WAAU,IAAD,OACDS,EAAUR,OAAOS,KAAKC,KAAKrB,OAC3BsB,EAAgBD,KAAKX,qBACrBa,EAAmBF,KAAKL,kCAC9B,OACE,gCACE,uDACA,6BAEIG,EAAQK,KAAI,SAAAC,GAAI,OACd,6BACE,wBAAQC,QAAS,EAAKtB,aAAtB,SAAqCqB,KAD9BE,IAAQC,iBAKvB,2CACA,+BACGT,EAAQK,KAAI,SAAAC,GAAI,OACf,+BAA8BA,EAA9B,IACE,qCAAQ,EAAKzB,MAAMyB,QADZE,IAAQC,eAGlBN,EAAgB,yCAAW,+BAAOA,OAA6B,KAC/DC,EAAmB,qDAAuB,iCAAOA,EAAP,UAAwC,eAhD7F,GAAyBM,aAAZ9B,EAEJ+B,aAAe,GAqDT/B,QC/CAgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d3c12059.chunk.js","sourcesContent":["import './App.css';\nimport shortid from 'shortid'\nimport React, { Component } from 'react'\n\nexport class App extends Component {\n\n  static defaultProps = {\n\n  }\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n  clickHandler = (e) => (\n\n    this.setState((prevState) => (\n      { [e.target.textContent]: prevState[e.target.textContent] + 1 }\n    ))\n  )\n  countTotalFeedback = () => {\n    const value = Object.values(this.state);\n    return value.reduce((acc = 0, curValue) => (\n      acc += curValue\n    ))\n  }\n  countPositiveFeedbackPercentage = () => {\n    return Math.round(this.state.good / this.countTotalFeedback() * 100)\n  }\n\n  render() {\n    const options = Object.keys(this.state);\n    const totalFeedback = this.countTotalFeedback()\n    const totalFeedbackPrs = this.countPositiveFeedbackPercentage()\n    return (\n      <div>\n        <h2>Please live a comment</h2>\n        <ul>\n          {\n            options.map(item => (\n              <li key={shortid.generate()}>\n                <button onClick={this.clickHandler}>{item}</button>\n              </li>))\n          }\n        </ul>\n        <h2>Statistic</h2>\n        <ul>\n          {options.map(item => (\n            <li key={shortid.generate()}>{item}:\n              <span> {this.state[item]}</span>\n            </li>))}\n          {totalFeedback ? <li>total: <span>{totalFeedback}</span></li> : null}\n          {totalFeedbackPrs ? <li>positive feedback: <span>{totalFeedbackPrs}%</span></li> : null}\n        </ul >\n      </div >\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}