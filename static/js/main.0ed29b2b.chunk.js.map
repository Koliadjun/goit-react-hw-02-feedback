{"version":3,"sources":["components/StatisticsComp/Statistics/Statistics.jsx","components/StatisticsComp/FeedbackOptions/FeedbackOptions.jsx","components/StatisticsComp/Section/Section.jsx","components/StatisticsComp/Notification/Notification.jsx","components/StatisticsComp/StatisticsCopm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Statistics","options","total","positivePercentage","ops","Object","keys","map","item","shortid","generate","FeedbackOptions","onLeaveFeedback","onClick","Section","title","children","Notification","message","StatisticsComp","state","props","stats","clickHandler","e","setState","prevState","target","textContent","countTotalFeedback","values","reduce","acc","curValue","countPositiveFeedbackPercentage","Math","round","good","totalFeedback","this","totalFeedbackPrs","Component","defaultProps","neutral","bad","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAiCeA,MA7Bf,YAA6D,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC9BC,EAAMC,OAAOC,KAAKL,GACxB,OACE,+BACGG,EAAIG,KAAI,SAAAC,GAAI,OACX,+BACGA,EADH,IACS,qCAAQP,EAAQO,QADhBC,IAAQC,eAIlBR,EACC,yCACS,+BAAOA,OAEd,KACHC,EACC,qDACqB,iCAAOA,EAAP,UAEnB,SCDKQ,EAjBS,SAAC,GAAkC,IAAhCV,EAA+B,EAA/BA,QAASW,EAAsB,EAAtBA,gBAClC,OACE,6BACGX,EAAQM,KAAI,SAAAC,GAAI,OACf,6BACE,wBAAQK,QAASD,EAAjB,SAAmCJ,KAD5BC,IAAQC,kBCEVI,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCAQC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,KCIDC,EAAb,4MAiBEC,MAjBF,eAkBO,EAAKC,MAAMC,OAlBlB,EAqBEC,aAAe,SAAAC,GAAC,OACd,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOC,YAAcF,EAAUF,EAAEG,OAAOC,aAAe,OAvBhE,EA0BEC,mBAAqB,kBACnBxB,OAAOyB,OAAO,EAAKV,OAAOW,QAAO,eAACC,EAAD,uDAAO,EAAGC,EAAV,8CAAwBD,EAAOC,MA3BpE,EA6BEC,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKhB,MAAMiB,KAAO,EAAKR,qBAAwB,MA9B/D,4CAgCE,WACE,IAAMS,EAAgBC,KAAKV,qBACrBW,EAAmBD,KAAKL,kCAC9B,OACE,gCACE,cAAC,EAAD,CAASnB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEd,QAASI,OAAOC,KAAKiC,KAAKnB,OAC1BR,gBAAiB2B,KAAKhB,iBAGzBe,EACC,cAAC,EAAD,CAASvB,MAAM,aAAf,SACE,cAAC,EAAD,CACEd,QAASsC,KAAKnB,MACdlB,MAAOoC,EACPnC,mBAAoBqC,MAIxB,cAAC,EAAD,CAActB,QAAQ,6BApDhC,GAAoCuB,aAAvBtB,EACJuB,aAAe,CACpBpB,MAAO,CACLe,KAAM,EACNM,QAAS,EACTC,IAAK,IAsDIzB,QCzDA0B,EANH,WACV,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0ed29b2b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nfunction Statistics({ options, total, positivePercentage }) {\n  const ops = Object.keys(options);\n  return (\n    <ul>\n      {ops.map(item => (\n        <li key={shortid.generate()}>\n          {item}:<span> {options[item]}</span>\n        </li>\n      ))}\n      {total ? (\n        <li>\n          total: <span>{total}</span>\n        </li>\n      ) : null}\n      {positivePercentage ? (\n        <li>\n          positive feedback: <span>{positivePercentage}%</span>\n        </li>\n      ) : null}\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  options: PropTypes.shape({}).isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul>\n      {options.map(item => (\n        <li key={shortid.generate()}>\n          <button onClick={onLeaveFeedback}>{item}</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nexport default Section;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\nexport class StatisticsComp extends Component {\n  static defaultProps = {\n    stats: {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    },\n  };\n\n  static propTypes = {\n    stats: PropTypes.shape({\n      good: PropTypes.number.isRequired,\n      neutral: PropTypes.number.isRequired,\n      bad: PropTypes.number.isRequired,\n    }),\n  };\n\n  state = {\n    ...this.props.stats,\n  };\n\n  clickHandler = e =>\n    this.setState(prevState => ({\n      [e.target.textContent]: prevState[e.target.textContent] + 1,\n    }));\n\n  countTotalFeedback = () =>\n    Object.values(this.state).reduce((acc = 0, curValue) => (acc += curValue));\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n  render() {\n    const totalFeedback = this.countTotalFeedback();\n    const totalFeedbackPrs = this.countPositiveFeedbackPercentage();\n    return (\n      <div>\n        <Section title={'Please live a comment'}>\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.clickHandler}\n          />\n        </Section>\n        {totalFeedback ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              options={this.state}\n              total={totalFeedback}\n              positivePercentage={totalFeedbackPrs}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default StatisticsComp;\n","import './App.css';\nimport React from 'react'\nimport StatisticsComp from './components/StatisticsComp';\nconst App = () => {\n  return (\n    <StatisticsComp />\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}